{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"https://tools.texoit.com/backend-java/api/movies\";\nexport const getWinnersByYear = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/winnersByYear`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\nexport const getTopStudios = async () => {\n  try {\n    const response = await axios.get(`${API_URL}?projection=studios-with-win-count`);\n    const studios = response.data.studios;\n    console.log(studios);\n\n    // Retorna apenas os 3 primeiros estúdios\n    return studios.slice(0, 3);\n  } catch (error) {\n    console.error(\"Error fetching top studios:\", error);\n    return [];\n  }\n};\nexport const getProducerIntervals = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/producerIntervals`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching producer intervals:\", error);\n    return [];\n  }\n};\nexport const getMovies = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/movies`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_URL","getWinnersByYear","response","get","data","error","console","getTopStudios","studios","log","slice","getProducerIntervals","getMovies"],"sources":["/Users/josesilva/Documents/Projetos/sitepiorfilme/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"https://tools.texoit.com/backend-java/api/movies\";\n\nexport const getWinnersByYear = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/winnersByYear`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\n\nexport const getTopStudios = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=studios-with-win-count`\n    );\n    const studios = response.data.studios;\n\n    console.log(studios);\n\n    // Retorna apenas os 3 primeiros estúdios\n    return studios.slice(0, 3);\n  } catch (error) {\n    console.error(\"Error fetching top studios:\", error);\n    return [];\n  }\n};\n\nexport const getProducerIntervals = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/producerIntervals`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching producer intervals:\", error);\n    return [];\n  }\n};\n\nexport const getMovies = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/movies`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    return [];\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kDAAkD;AAElE,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAE,GAAEH,OAAQ,gBAAe,CAAC;IAC5D,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAC7B,GAAEH,OAAQ,oCACb,CAAC;IACD,MAAMQ,OAAO,GAAGN,QAAQ,CAACE,IAAI,CAACI,OAAO;IAErCF,OAAO,CAACG,GAAG,CAACD,OAAO,CAAC;;IAEpB;IACA,OAAOA,OAAO,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMM,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAE,GAAEH,OAAQ,oBAAmB,CAAC;IAChE,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMO,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAE,GAAEH,OAAQ,SAAQ,CAAC;IACrD,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}