{"ast":null,"code":"import axios from\"axios\";const API_URL=\"https://tools.texoit.com/backend-java/api/movies\";export const getWinnersByYear=async year=>{try{const response=await axios.get(\"\".concat(API_URL,\"?winner=true&year=\").concat(year));return response.data;}catch(error){console.error(\"Error fetching winners by year:\",error);return[];}};export const getYearsWithMultipleWinners=async()=>{try{const response=await axios.get(\"\".concat(API_URL,\"?projection=years-with-multiple-winners\"));return response.data;}catch(error){console.error(\"Error fetching winners by year:\",error);return[];}};export const getTopStudios=async()=>{try{const response=await axios.get(\"\".concat(API_URL,\"?projection=studios-with-win-count\"));const studios=response.data.studios;// Retorna apenas os 3 primeiros estúdios\nreturn studios.slice(0,3);}catch(error){console.error(\"Error fetching top studios:\",error);return[];}};export const getProducerIntervals=async()=>{try{const response=await axios.get(\"\".concat(API_URL,\"?projection=max-min-win-interval-for-producers\"));return response.data;}catch(error){console.error(\"Error fetching producer intervals:\",error);return[];}};export const getMovies=async(pageNumber,pageSize,year)=>{try{let url=\"\".concat(API_URL,\"?page=\").concat(pageNumber,\"&size=\").concat(pageSize);if(year){url+=\"&year=\".concat(year);}const response=await axios.get(url);return response.data;}catch(error){console.error(\"Error fetching movies:\",error);return[];}};","map":{"version":3,"names":["axios","API_URL","getWinnersByYear","year","response","get","concat","data","error","console","getYearsWithMultipleWinners","getTopStudios","studios","slice","getProducerIntervals","getMovies","pageNumber","pageSize","url"],"sources":["/Users/josesilva/Documents/Projetos/sitepiorfilme/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"https://tools.texoit.com/backend-java/api/movies\";\n\nexport const getWinnersByYear = async (year: string) => {\n  try {\n    const response = await axios.get(`${API_URL}?winner=true&year=${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\n\nexport const getYearsWithMultipleWinners = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=years-with-multiple-winners`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\n\nexport const getTopStudios = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=studios-with-win-count`\n    );\n    const studios = response.data.studios;\n\n    // Retorna apenas os 3 primeiros estúdios\n    return studios.slice(0, 3);\n  } catch (error) {\n    console.error(\"Error fetching top studios:\", error);\n    return [];\n  }\n};\n\nexport const getProducerIntervals = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=max-min-win-interval-for-producers`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching producer intervals:\", error);\n    return [];\n  }\n};\n\nexport const getMovies = async (\n  pageNumber: number,\n  pageSize: number,\n  year?: string\n) => {\n  try {\n    let url = `${API_URL}?page=${pageNumber}&size=${pageSize}`;\n    if (year) {\n      url += `&year=${year}`;\n    }\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    return [];\n  }\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,OAAO,CAAG,kDAAkD,CAElE,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAO,CAAAC,IAAY,EAAK,CACtD,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,IAAAC,MAAA,CAAIL,OAAO,uBAAAK,MAAA,CAAqBH,IAAI,CAAE,CAAC,CACvE,MAAO,CAAAC,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,MAAO,EAAE,CACX,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,2BAA2B,CAAG,KAAAA,CAAA,GAAY,CACrD,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,IAAAC,MAAA,CAC3BL,OAAO,2CACZ,CAAC,CACD,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,CAAEA,KAAK,CAAC,CACvD,MAAO,EAAE,CACX,CACF,CAAC,CAED,MAAO,MAAM,CAAAG,aAAa,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,IAAAC,MAAA,CAC3BL,OAAO,sCACZ,CAAC,CACD,KAAM,CAAAW,OAAO,CAAGR,QAAQ,CAACG,IAAI,CAACK,OAAO,CAErC;AACA,MAAO,CAAAA,OAAO,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAC5B,CAAE,MAAOL,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,MAAO,EAAE,CACX,CACF,CAAC,CAED,MAAO,MAAM,CAAAM,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CAC9C,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,IAAAC,MAAA,CAC3BL,OAAO,kDACZ,CAAC,CACD,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,CAAEA,KAAK,CAAC,CAC1D,MAAO,EAAE,CACX,CACF,CAAC,CAED,MAAO,MAAM,CAAAO,SAAS,CAAG,KAAAA,CACvBC,UAAkB,CAClBC,QAAgB,CAChBd,IAAa,GACV,CACH,GAAI,CACF,GAAI,CAAAe,GAAG,IAAAZ,MAAA,CAAML,OAAO,WAAAK,MAAA,CAASU,UAAU,WAAAV,MAAA,CAASW,QAAQ,CAAE,CAC1D,GAAId,IAAI,CAAE,CACRe,GAAG,WAAAZ,MAAA,CAAaH,IAAI,CAAE,CACxB,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,KAAK,CAACK,GAAG,CAACa,GAAG,CAAC,CACrC,MAAO,CAAAd,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,MAAO,EAAE,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}