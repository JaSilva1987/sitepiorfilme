{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"https://tools.texoit.com/backend-java/api/movies\";\nexport const getWinnersByYear = async year => {\n  try {\n    const response = await axios.get(`${API_URL}?winner=true&year=${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\nexport const getYearsWithMultipleWinners = async () => {\n  try {\n    const response = await axios.get(`${API_URL}?projection=years-with-multiple-winners`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\nexport const getTopStudios = async () => {\n  try {\n    const response = await axios.get(`${API_URL}?projection=studios-with-win-count`);\n    const studios = response.data.studios;\n\n    // Retorna apenas os 3 primeiros estúdios\n    return studios.slice(0, 3);\n  } catch (error) {\n    console.error(\"Error fetching top studios:\", error);\n    return [];\n  }\n};\nexport const getProducerIntervals = async () => {\n  try {\n    const response = await axios.get(`${API_URL}?projection=max-min-win-interval-for-producers`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching producer intervals:\", error);\n    return [];\n  }\n};\nexport const getMovies = async (page, size) => {\n  try {\n    const response = await axios.get(`${API_URL}?page=${page}&size=${size}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","getWinnersByYear","year","response","get","data","error","console","getYearsWithMultipleWinners","getTopStudios","studios","slice","getProducerIntervals","getMovies","page","size"],"sources":["/Users/josesilva/Documents/Projetos/sitepiorfilme/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\n\nconst API_URL = \"https://tools.texoit.com/backend-java/api/movies\";\n\nexport const getWinnersByYear = async (year: string) => {\n  try {\n    const response = await axios.get(`${API_URL}?winner=true&year=${year}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\n\nexport const getYearsWithMultipleWinners = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=years-with-multiple-winners`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching winners by year:\", error);\n    return [];\n  }\n};\n\nexport const getTopStudios = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=studios-with-win-count`\n    );\n    const studios = response.data.studios;\n\n    // Retorna apenas os 3 primeiros estúdios\n    return studios.slice(0, 3);\n  } catch (error) {\n    console.error(\"Error fetching top studios:\", error);\n    return [];\n  }\n};\n\nexport const getProducerIntervals = async () => {\n  try {\n    const response = await axios.get(\n      `${API_URL}?projection=max-min-win-interval-for-producers`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching producer intervals:\", error);\n    return [];\n  }\n};\n\nexport const getMovies = async (page: number, size: number) => {\n  try {\n    const response = await axios.get(`${API_URL}?page=${page}&size=${size}`);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,kDAAkD;AAElE,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAY,IAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,OAAQ,qBAAoBE,IAAK,EAAC,CAAC;IACvE,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAME,2BAA2B,GAAG,MAAAA,CAAA,KAAY;EACrD,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAC7B,GAAEJ,OAAQ,yCACb,CAAC;IACD,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAC7B,GAAEJ,OAAQ,oCACb,CAAC;IACD,MAAMU,OAAO,GAAGP,QAAQ,CAACE,IAAI,CAACK,OAAO;;IAErC;IACA,OAAOA,OAAO,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMM,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAC7B,GAAEJ,OAAQ,gDACb,CAAC;IACD,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMO,SAAS,GAAG,MAAAA,CAAOC,IAAY,EAAEC,IAAY,KAAK;EAC7D,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAE,GAAEJ,OAAQ,SAAQc,IAAK,SAAQC,IAAK,EAAC,CAAC;IACxE,OAAOZ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}